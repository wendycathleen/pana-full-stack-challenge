.container-fluid
  .row
    .col-xs-12.m-b-3
      .center-xs
        h2 #{title}
    .col-xs-12.m-b-2
      h3 The Challenge
      b The goal is to finish an implementing a sample front-end of one of our products, Pana Flight Search.
      p During this challenge you will work through several milestones that have increasing difficulty.
        |  Each milestone will test a different part of your knowledge of frontend and backend Javascript.
        |  We've built out the basic scaffolding for you, if you run into any bugs, fix them to progress.

    .col-xs-12.m-b-2
      h3 The Milestones
      ol
        li
          h4 Display the Data
          ul
            li The basic layout is already built out for each flight, you'll just need to finish up a few of the "Placeholder" sections
            li Refer to the following mock
            img(src=require('assets/flight_search.png') style="width:90%")
        li
          h4 Implement Pagination
          ul
            li The current implementation uses hardcoded values to only show 5 results, fix the implementation so that each page shows at most 20 items
            li Finish implementing
              span
                .btn.btn--sm.m-l-1.m-r-1 Next Page
              span and
              span
                .btn.btn--sm.m-l-1.m-r-1 Previous Page
              span so that they show the appropriate page on click.
              ul
                li If the user is on the first page, clicking "Previous Page" should have no effect
                li If the user is on the last page, clicking "Next Page" have no effect
                li Stretch Goal (if working as a take-home) - Disable/grey out the buttons when they have no effect
            li Replace
              code TODO: Page Count
              | to display the current page and the total number of pages
            li Pagination should be implemented on the front-end using the keys
              code currentPage
              code fullResults
              | and
              code paginatedResults
              ul
                li paginatedResults is the collection that is rendered in the list view
        li
          h4 Implement Sorting
          ul
            li Implement the `Sort By TODO` dropdown
            li When the collection is rendered for the first time, it should be sorted by "Best"
            li Replace "TODO" in "Sort by TODO" with the current selection - e.g. "Sort By Best"
            li You should sort by Best (flight.score), Price (low), Price, (high), Duration (shortest to longest)
            li Implementation can be on the backend or the front-end
        li
          h4 Implement Airlines Filtering
          ul
            li Each airline should show up as a item in the dropdown
            li Clicking on an airline item in the dropdown should
              b  1)
              span  highlight that item and
              b  2)
              span  only show results for that airline
            li If the airline is already "active", then clicking on the item should remove that filter
            li Implementation can be on the backend or the front-end

    .col-xs-12.m-b-2
      h4 Extra Credit
      ol
        li
          h4 Create Loading and Error States
          ul
            li Flight searches are often unpredictable in how long they take to return results.
            li There is middleware on the API that throttles the connection
              ul
                li Update the throttle so it takes anywhere between 1 and 5 seconds to return results.
                li Add an awesome loading state that makes waiting 5 seconds feel like nothing
            li There is also middleware to simulate an error
                li Update the error chance to return an error 50% of the time
                li Handle those error states eloquently (Frontend or Backend)
        li
          h4 Return Flights
          ul
            li There is an endpoint for fetching all available return flights for a given outbound flight. You can try implementing selection of first the outbound and then the return.
            li Your goal here will be to track state of selected flights, display any selected flights, allow a user to select a return flight, and display the final set of flights
        li
          h4 Mobile
          ul
            li Make it mobile friendly!
            li We didn't provide any mocks for this, so use your imagination
        li
          h4 Build a Check-Out Page
          ul
            li Again, no mocks, but we're curious what you would include.
        li
          h4 Implement Security
          ul
            li Anyone can use your app right now...
            li Try to implement some sort of authentication or authorization
